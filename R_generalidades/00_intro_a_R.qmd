---
title: "Introducción a R"
author:
  - name: Garcia Rios Santiago
    email: santiago_gr@ciencias.unam.mx
format: 
  html:
    page-layout: full # ocupar toda la página
    lang: es  # figure, note, warning, code
    # code-fold: true # retraer código
    # code-summary: "Mostrar código"
execute:
  echo: true  
  warning: true
---


## testing R

```{r}
plot(1:10)
```

## R packages

```{r, eval=FALSE}
install.packages('remotes', dependencies = TRUE)
```
## working directory
```{r, eval=FALSE}
getwd()
setwd()
```

## ls, str 

```{r, eval=FALSE}
ls()
ls(pat="m") #muestra una lista de todos los objetos cuyo nombre incluye "m"
```

```{r, eval=FALSE}
str(nombre) # Estructura del objeto nombre, por ejemplo
## chr "Darwin"
ls.str() # todos los objetos que tenemos en la memoria
```

## help 

```{r, eval=FALSE}
help.search("phylogeny")
# value en ayuda es lo que regresa, los argumentos son el input
```

## objetos

Hay cinco tipos de objetos de datos en R
- vector
- factor
- matriz
- base de datos (“*data frame*”) 
- lista.

```{r}
a <- 1:5
a
mode(a)
length(a)
```

Ahora un vector de tipo lógico:

```{r}  
b <- c(FALSE,TRUE,FALSE,FALSE,TRUE)
b
## [1] FALSE TRUE FALSE FALSE TRUE
mode(b)
## [1] "logical"
length(b)
## [1] 5

# Este tipo de vector también puede resultar de una operación lógia
a >= 3
## [1] FALSE FALSE TRUE TRUE TRUE
```

Un vector de tipo carácter:

```{r}
z <- c("orden", "familia", "género", "especie")
mode(z)
## [1] "character"
length(z)
## [1] 4
z
## [1] "orden" "familia" "género" "especie"
```

## Extraer elementos

Podemos extraer elementos individuales de un vector de la siguiente manera:

```{r}
a[3]
## [1] 3
z[c(1,3)]
## [1] "orden" "género"
i <- c(4,5)
z[i]
## [1] "especie" NA
4
i <- c(3,4)
z[i]
## [1] "género" "especie"
z[c(1,1,1)]
## [1] "orden" "orden" "orden"
```


Podemos usar índices negativos para quitar el elemento correspondiente
```{r}

z[-3]
## [1] "orden" "familia" "especie"
```

Podemos también usar índices lógicos, por ejemplo:

```{r, eval=FALSE}
z[c(TRUE,TRUE,FALSE,TRUE)]
## [1] "orden" "familia" "especie"
```

## Crear Vectores

```{r}
y <- rnorm(n=6, mean=0, sd=1)
y
## [1] -0.5249471 -0.7956363 -2.0288943 0.5662592 0.6820299 0.1531381
y >= 0.2
## [1] FALSE FALSE FALSE TRUE TRUE FALSE
```

Se puede combinar el índice lógico con la función which para seleccionar ciertos datos de un vector pero no otros:

```{r}
which(y>=0.2)
## [1] 4 5
y[y>=0.2]
## [1] 0.5662592 0.6820299
5
y[which(y>=0.2)]
## [1] 0.5662592 0.6820299
```

En algunos casos los vectores (y otros objetos en R) pueden tener un tercer atributo, nombres. En ciertos casos, puede ser muy útil asignar nombres a los valores de un vector:

```{r}
x <- c("Sapindales", "Burseraceae", "Bursera", "Bursera_simaruba")
names(x) <- z
x
str(x)
## orden familia género especie
## "Sapindales" "Burseraceae" "Bursera" "Bursera_simaruba"
```

```{r}



```


```{r, eval=FALSE}

Un factor se deriva de un vector pero tiene un atributo adicional, los niveles:


f <- c("Macho","Hembra","Hembra","Macho","Hembra","Hembra")
f <- factor(f)
f
## [1] Macho Hembra Hembra Macho Hembra Hembra
## Levels: Hembra Macho

# Como alternativa podemos hacer lo siguiente:
f <- c(0,0,1,1,1)
f <- factor(f)
levels(f) <- c("Macho","Hembra")
table(f)
## f
## Macho Hembra
## 2 3
summary(f)
## Macho Hembra
## 2 3
f
## [1] Macho Macho Hembra Hembra Hembra
## Levels: Macho Hembra

## Matrix ----

# Una matriz es un vector organizado de manera tabular. Tiene el atributo adicional de dimensión (dim)
A <- matrix(1:9,3,3)
A
6
## [,1] [,2] [,3]
## [1,] 1 4 7
## [2,] 2 5 8
## [3,] 3 6 9
B <- 1:9
dim(B) <- c(3,3)
B
## [,1] [,2] [,3]
## [1,] 1 4 7
## [2,] 2 5 8
## [3,] 3 6 9

# Podemos rellenar una matriz por renglón o por columna:
A <- matrix(1:9,3,3, byrow=TRUE)
A
## [,1] [,2] [,3]
## [1,] 1 2 3
## [2,] 4 5 6
## [3,] 7 8 9
B <- matrix(1:9,3,3, byrow=FALSE)
B
## [,1] [,2] [,3]
## [1,] 1 4 7
## [2,] 2 5 8
## [3,] 3 6 9

# Podemos obtener los elementos de una matriz usando el índice numérico, en el orden renglón/columna:
A[3,2]
## [1] 8
A[,3] # la tercera columna
## [1] 3 6 9
A[2,] # el segundo renglón
## [1] 4 5 6

## dataframe -----

Y <- data.frame(z, y=1:4, x=5:8)
Y
## z y x
## 1 orden 1 5
## 2 familia 2 6
## 3 género 3 7
## 4 especie 4 8

# Se puede obtener información sobre el objeto data frame y lo que contiene:
str(Y)
## ’data.frame’: 4 obs. of 3 variables:
## $ z: chr "orden" "familia" "género" "especie"
## $ y: int 1 2 3 4
## $ x: int 5 6 7 8


## Listas ----

milista <- list(a=1:5, b="Hola", c=function(x) x*sin(x))

milista[1]
## $a
## [1] 1 2 3 4 5
str(milista[1])
## List of 1
## $ a: int [1:5] 1 2 3 4 5

# Intenta esto:
milista[1] + 1
#¿Qué sucede?
# Puesto que el objeto que obtenemos es una lista, no podemos hacer operaciones matemáticas sobre ella.
# Generalmente si quieren extraer elementos de una lista para crear otra lista los corchetes simples funcionan
# bien. Pero, si lo que quieren es extraer los elementos en otra forma es necesario usar dobles corchetes, o -
# en caso de que los elementos tengan un nombre (como es el caso aquí) - usando el signo de dólar ($) y el
# nombre del elemento:
milista[[1]]
## [1] 1 2 3 4 5
milista$a
## [1] 1 2 3 4 5
milista[[1]] +1 #Ahora sí podemos realizar operaciones matemáticas sobre los elementos de la lista
## [1] 2 3 4 5 6
milista$a[2]
## [1] 2
milista[[1]] [-2] #Para extraer todos los elementos de "a" menos el segundo
## [1] 1 3 4 5

## Leer y escribir datos en archivos ----

####Leer y escribir datos en archivos

#  datos <- read.table("data/raw/PanTHERIA.txt", header=TRUE)
datos <- read.csv("data/raw/PanTHERIA.csv", header=TRUE)
datos_2 <- read.csv("data/raw/PanTHERIA_2.csv", header=TRUE)


str(datos)

head(datos)

tail(datos)

nrow(datos) #¿Cuántos renglones tiene?

ncol(datos) #¿Cuántas columnas?

dim(datos)

### Extraer columnas o renglones ----

# También podemos extraer columnas enteras o renglones (con todas las columnas):
datos$AdultBodyMass_g


datos[,6]

datos[1:5,] #Para extraer todas las columnas para los primeros 5 renglones

datos$SocialGrpSize

### NA ----

length(datos$SocialGrpSize)
## [1] 250
length(na.omit(datos$SocialGrpSize))
## [1] 5

#¿Cuántos datos faltantes hay? Podemos calcular la diferencia con R:
length(datos$SocialGrpSize) - length(na.omit(datos$SocialGrpSize))
## [1] 245

#### how to count missing data in data frame in r
sum(is.na(datos$SocialGrpSize))
## [1] 245
length(which(is.na(datos$SocialGrpSize)))
## [1] 245

cor(datos$AdultBodyMass_g, datos$GestationLen_d) # no sirve por los NA
## [1] NA

 # Hay datos faltantes y la correlación no se puede calcular. Hay varias maneras de resolver esto. Una manera
 # puede ser extrayendo las columnas de interés (nombre de las especies, tamaño corporal y tiempo de gestación),
 # y luego extraer todos los NA.
datos_cut <- with(datos, data.frame(Binomial, AdultBodyMass_g,GestationLen_d))
datos_cut <- na.omit(datos_cut)

 # Otra alternativa es usar el comando subset
datos_cut2 <- subset(datos, select=c(Binomial, AdultBodyMass_g, GestationLen_d))
datos_cut2 <- na.omit(datos_cut2)

 # Ahora sí podemos calcular la correlación
cor(datos_cut2$AdultBodyMass_g, datos_cut2$GestationLen_d)
## [1] 0.4756803

### subset ----

 # subset funciona también para tareas mucho más complejas. Por ejemplo, extraer todos los datos de las
 # variables tamaño corporal y gestación pero solo para los félidos
felidae <- subset(datos, Family=="Felidae", select=c(Family, Binomial, AdultBodyMass_g, GestationLen_d))
felidae

### funciones ----

# También podemos crear nuestras propias funciones en R. Por ejemplo:
mimedia <- function(x) {sum(x)/length(x)}
Mass <- na.omit(felidae$AdultBodyMass_g)
Mass
mimedia(Mass)
## [1] 23592.38
Mass <- felidae$AdultBodyMass_g
mimedia(Mass)
## [1] NA

 # Alternativamente, podemos incluir la función de omitir los NAs directamente en la función:
mimedia2 <- function(x) {sum(x,na.rm=TRUE)/length(na.omit(x))}
#Para obtener la media del tamaño corporal de todas las especies de felidae:
mimedia2(felidae$AdultBodyMass_g)
## [1] 23592.38
#Para obtener la media del tiempo de gestación:
mimedia2(felidae$GestationLen_d)
## [1] 78.99964

  ### media ----

mean(felidae$AdultBodyMass_g, na.rm=TRUE)
## [1] 23592.38

  ### Loops ----

 # poder combinar programación con estadística para el análisis de sus datos.
 # Por ejemplo, supongamos que quieren calcular la media para todos las columnas de una base de datos. Lo
colnames(datos)
dat2 <- subset(datos, Family=="Canidae", select=c(AdultBodyMass_g, GestationLen_d, LitterSize, MaxLongevity_m))
mimedia2 <- function(x) {sum(x,na.rm=TRUE)/length(na.omit(x))}
mimedia2(dat2$AdultBodyMass_g)
## [1] 7518.692
mimedia2(dat2$GestationLen_d)
## [1] 59.34231
vec.medias <- as.numeric()
for (i in 1:ncol(dat2)){
  media <- mimedia2(dat2[,i])
  vec.medias <- c(media,vec.medias)
}
names(vec.medias) <- colnames(dat2)
vec.medias
## AdultBodyMass_g GestationLen_d LitterSize MaxLongevity_m WeaningAge_d
## 58.256818 171.200000 4.065517 59.342308 7518.692187

# ¿Son correctos los nombres de las medias? ¿Qué sucedió? ¿Cómo lo arreglamos? Busquemos en Google una
colnames(dat2)
rev(colnames(dat2))
names(vec.medias) <- rev(colnames(dat2))
vec.medias

# ¿Qué otra forma se les ocurre para ir llenando el vector de medias con los datos que se generan de medias
# por variable en el loop?

vec.medias <- as.numeric()
for (i in 1:ncol(dat2)){
  media <- mimedia2(dat2[,i])
  vec.medias[i] <- media
}
names(vec.medias) <- colnames(dat2)
vec.medias

# Alternativamente, se puede usar una función previamente creada en R:
mediasC <- colMeans(dat2,na.rm=TRUE)
mediasC
## AdultBodyMass_g GestationLen_d LitterSize MaxLongevity_m WeaningAge_d
## 7518.692187 59.342308 4.065517 171.200000 58.256818

```
